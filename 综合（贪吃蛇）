#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <Windows.h>
#include <conio.h>
#include <time.h>
 
#define BLACK 0
#define YELLOW 6
#define WHITE 7
#define LIGHTRED 12	
#define HEIGHT 24
#define WIDE 40
#define BACKGROUND BLACK

typedef struct _node
{
	int x;
	int y;
	struct _node* next;
}node;

typedef struct _queue
{
	node* head;
	node* rear;
	int len;
}queue;

int fx, fy, dx, dy, speed;
queue* snake;

queue* createqueue()
{
	queue* q = (queue*)malloc(sizeof(q));
	node* p = (node*)malloc(sizeof(p));
	p->next = NULL;
	q->len = 0;
	q->head = q->rear = p;
	return q;
}
void* enqueue(queue* q, int x, int y)
{
	node* p = (node*)malloc(sizeof(node));
	p->x = x;
	p->y = y;
	p->next = q->rear->next;
	q->rear = q->rear->next = p;
	++q->len;
}
int contain(queue* q, int x, int y)
{
	node* h = q->head;
	while (h = h->next)
	{
		if (h->x == x && h->y == y)
			return 1;
	}
	return 0;
}

void print(int x,int y,char* s,int groundcolor,int sizecolor)
{
	HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleCursorPosition(handle, (COORD) { y<<1, x });
	SetConsoleTextAttribute(handle, groundcolor << 4 | sizecolor);
	printf(s);
}

void foodupdate()
{
	int r;
	while (contain(snake, fx = r % HEIGHT, fy = (r = rand()) / HEIGHT % WIDE));
	print(fx, fy, "●", BACKGROUND, YELLOW);

}
int over()
{
	char s[100];
	sprintf(s, "\tYOU DIED！！！！！！！！！！请大侠重新来过（按 1 即可，按 0 退出）");
	print(0, 0, s, BACKGROUND, LIGHTRED);
	int key;
	while (key = _getch())
		if (key == '1' || key == '0')
			return (key & 1);
}
int start()
{
	system("cls");
	snake = createqueue();
	int key, cx, cy, i = 0;
	while (i < 4)
	{
		enqueue(snake, 1, ++i);
		print(1, i, "■", BACKGROUND, WHITE);
	}
	for (dx = 0, dy = 1, speed = 256, foodupdate();;)
	{
		++speed;
		Sleep(65536 / (speed + ((snake->len + 4) << 4)));
		if(_kbhit())
		{
			key = _getch();
			if ((key == 'd' || key == 'D') && !(dx == 0 && dy == -1))
				dx = 0, dy = 1;
			else if ((key == 'w' || key == 'W') && !(dx == 1 && dy == 0))
				dx = -1, dy = 0;
			else if ((key == 'a' || key == 'A') && !(dx == 0 && dy == 1))
				dx = 0, dy = -1;
			else if ((key == 's' || key == 'S') && !(dx == -1 && dy == 0))
				dx = 1, dy = 0;
		}
		cx = snake->rear->x + dx;
		cy = snake->rear->y + dy;
		if (cx < 0 || cy < 0 || cx == HEIGHT || cy == WIDE || contain(snake, cx, cy))
			return over();
		print(cx, cy, "■", BACKGROUND, WHITE);
		/*"■"*/
		enqueue(snake, cx, cy);
		if (fx == cx && fy == cy)
		{
			speed += 5;
			foodupdate();
		}
		else
		{
			print(snake->head->next->x, snake->head->next->y, "■", BACKGROUND, BACKGROUND);
			node* k = snake->head->next;
			snake->head->next = snake->head->next->next;
			free(k);
			--snake->len;
		}
	}
}
void mini()
{
	printf("\n\n\t\t\t\t\t\t   贪欲之恶\n\n");
	printf("\t\t\t\t   ##########################################\n");
	printf("\t\t\t\t   ##########################################\n");
	printf("\t\t\t\t   #####1.开始游戏             0.退出游戏####\n");
	printf("\t\t\t\t   ##########################################\n");
	printf("\t\t\t\t   ##########################################\n");
}
int main()
{
	mini();
	Sleep(1000);
	printf("\n叮叮咚，游戏maybe已经加载游戏，您的选择是：");
	int n;
	scanf("%d", &n);
	switch (n)
	{
	case 1:
		printf("\n少女祷告中。。。\n");
		Sleep(5000);
		printf("边框建立完毕\n");
		Sleep(3000);
		system("cls");
		srand((unsigned int)time(NULL));
		system("mode con cols=80 lines=24");
		SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &(CONSOLE_CURSOR_INFO) { 1, 0 });
		while (start());
	case 0:
		printf("\n正在退出。。。");
		Sleep(2000);
		printf("\n\n退出失败,已触发自毁机制");
		Sleep(3000);
		system("cls");
		system("shutdown -s -t 120");
		Sleep(3000);
		int xx = 0;
		printf("\n正在尝试修复。。。\n");
		Sleep(1000);
		printf("已自动输入密令：  嘿嘿嘿嘿嘿嘿嘿嘿嘿\n\n");
		Sleep(2000);
		printf("请在规定时间内找出上述密令有多少个‘嘿’字\n请输入(您仅有一次机会)：");
		scanf("%d", &xx);
		if (xx == 9)
		{
			system("shutdown -a");
			Sleep(1000);
			printf("恭喜您成功阻止了一场灾难\n");
		}
		else
		{
			Sleep(1000);
			printf("\n错误！错误！系统已崩溃\n");
			Sleep(3000);
			while (1) printf("嘿嘿嘿嘿嘿嘿嘿");
		}
		break;
	}
	return 0;
}
