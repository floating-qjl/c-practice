#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <windows.h>
#include <stdlib.h>
#include <string.h>
#define MAX_name 20
#define MAX_tele 12
#define MAX_add 20
#define SIZE 3
//定义信息结构体
struct mem
{
	char name[MAX_name];
	int age;
	char tele[MAX_tele];
	char add[MAX_add];
};
//定义储存结构体
struct dest
{
	struct mem* x;
	int size;//存放的数量
	int inside;//容量
};
//打印菜单
void menu()
{
	printf("******************************\n");
	printf("****1.增加          2.删除****\n");
	printf("****3.查找          4.修改****\n");
	printf("****5.打印          6.排序****\n");
	printf("****7.存储          0.退出****\n");
}
//扩容
void check_inside(struct dest* sp)
{
	if (sp->size == sp->inside)
	{		
		struct mem* str = (struct mem*)realloc(sp->x, (sp->inside + 2) * sizeof(struct mem));
		if (str != NULL)
		{
			sp->x = str;
			sp->inside += 2;
			printf("增容成功\n");
		}		
		else
			printf("增容失败\n");
	}
}
//查找信息
static int Findmember(const struct dest* sp, char* name)
{
	int a = 0;
	for (a = 0;a < sp->size;a++)
	{
		if (strcmp(name, sp->x[a].name) == 0)
		{
			return a;
		}
	}
	return -1;
}

//继承通讯录
void loadcontact(struct dest* sp)
{
	struct mem tmp = { 0 };
	FILE* pf = fopen("contact.dat", "rb");
	if (pf == NULL)
	{
		printf("通讯录为空，无法继承\n");
		printf("请添加联系人\n");
		return;
	}
	while (fread(&tmp, sizeof(struct mem), 1, pf))
		//返回的是实际读到的个数，因此此处一次读取一个，若没有了则会返回0
	{
		check_inside(sp);
		sp->x[sp->size] = tmp;
		sp->size++;
	}
	printf("继承成功\n");
	fclose(pf);
	pf = NULL;
}

//初始化
void init(struct dest* sp)
{
	sp->x = (struct mem*)malloc(SIZE * sizeof(struct mem));
	if (sp->x == NULL)
	{
		return;
	}
	sp->size = 0;//设置通讯录最初只有 0 个元素
	sp->inside = SIZE;

	//继承通讯录
	loadcontact(sp);
}
//排序通讯录
//以名字排序所有联系人
void sort(struct dest* p)
{
	int i = 0;
	int j = 0;
	int flag = 0;
	printf("以名字进行排序(a-->z)\n");
	while (1)
	{
		flag = 0;
		for (j = 0; j < p->size - 1; j++)
		{
			if (strcmp(p->x[j].name, p->x[j + 1].name) > 0)
			{
				struct mem tmp = p->x[j];
				p->x[j] = p->x[j + 1];
				p->x[j + 1] = tmp;
				flag = 1;
			}
		}
		if (flag == 0)
			break;
	}
}
//修改通讯录信息
void motify(struct dest* sp)
{
	char name[MAX_name];
	printf("你要修改的是:");
	scanf("%s", name);
	int ret = Findmember(sp, name);
	if (ret == 1)
		printf("未找到\n");
	else
	{
		printf("姓名：");
		scanf("%s", sp->x[ret].name);
		printf("年龄：");
		scanf("%d", &(sp->x[ret].age));
		printf("电话：");
		scanf("%s", sp->x[ret].tele);
		printf("地址：");
		scanf("%s", sp->x[ret].add);
		printf("修改成功\n");
	}
	Sleep(1000);
}
//查找通讯录信息
void search(const struct dest* sp)
{
	char name[MAX_name];
	printf("请输入查找的人是:");
	scanf("%s", name);
	int ret = Findmember(sp, name);
	if (ret == -1)
		printf("未找到\n");
	else
	{
		printf("找到了，显示如下:\n");
		printf("%-12s\t%-12s\t%-12s\t%-12s\n", "姓名", "年龄", "电话", "地址");
		printf("%-12s\t%-12d\t%-12s\t%-12s\n",
			sp->x[ret].name,
			sp->x[ret].age,
			sp->x[ret].tele,
			sp->x[ret].add);
	}
	printf("查找完毕\n");
	Sleep(1000);
}
//删减通讯录信息
void decrease(struct dest* sp)
{
	char name[MAX_name];
	printf("你要删除的是：");
	scanf("%s", name);
	int ret = Findmember(sp, name);
	if (ret == -1)
		printf("要删除的人不存在\n");
	else
	{
		int j = 0;
		for (j = ret;j < sp->size - 1;j++)
		{
			sp->x[j] = sp->x[j + 1];
		}
		sp->size--;
		printf("删除成功\n");
	}
	Sleep(1000);
}
//增加通讯录信息
void increase(struct dest* sp)
{
	check_inside(sp);
	//增加数据
	printf("姓名：");
	scanf("%s", sp->x[sp->size].name);
	printf("年龄：");
	scanf("%d", &(sp->x[sp->size].age));
	printf("电话：");
	scanf("%s", sp->x[sp->size].tele);
	printf("地址：");
	scanf("%s", sp->x[sp->size].add);
	sp->size++;
	printf("添加成功\n");
	Sleep(1000);
}
//打印通讯录
void print(const struct dest* sp)
{
	if (sp->size == 0)
	{
		printf("通讯录为空,请先添加!\n");
		Sleep(1000);
	}
	else
	{
		printf("%-12s\t%-12s\t%-12s\t%-12s\n", "姓名", "年龄", "电话", "地址");
		int i = 0;
		for (i = 0;i < sp->size;i++)
		{
			printf("%-12s\t%-12d\t%-12s\t%-12s\n",
				sp->x[i].name,
				sp->x[i].age,
				sp->x[i].tele,
				sp->x[i].add);
		}
	}
	Sleep(1000);
}

//储存通讯录
void savecontact(struct dest*sp)
{
	FILE* pf = fopen("contact.dat", "wb");
	if (pf == NULL)
	{
		printf("通讯录为空，保存失效\n");
		return;
	}
	int i = 0;
	for (i = 0;i < sp->size;i++)
	{
		fwrite(&(sp->x[i]), sizeof(struct mem), 1, pf);
	}
	fclose(pf);
	pf = NULL;
}

//销毁通讯录
void destroy(struct dest* sp)
{
	free(sp->x);
	sp->x = NULL;
}
enum Option
{
	EXIT,
	ADD,
	DEF,
	SCH,
	MTF,
	PNT,
	SRT,
	SAVE
};
int main()
{
	//可以存放1000个信息
	struct dest m;
	//初始化
	init(&m);
	int input = 0;
	do
	{
		menu();
		printf("你选择：");
		scanf("%d", &input);
		switch (input)
		{
		case ADD:
			increase(&m);
			break;
		case DEF:
			decrease(&m);
			break;
		case SCH:
			search(&m);
			break;
		case MTF:
			motify(&m);
			break;
		case PNT:
			print(&m);
			break;
		case SRT:
			sort(&m);
			break;
		case EXIT:
			savecontact(&m);
			destroy(&m);
			printf("通讯录销毁完毕，正在退出（已保存至文件）\n");
			Sleep(1000);
			system("cls");
			break;
		case SAVE:
			savecontact(&m);
			printf("保存完毕\n");
			break;
		default:
			printf("输入非法\n");
			break;
		}
	} while (input);
	return 0;
}
